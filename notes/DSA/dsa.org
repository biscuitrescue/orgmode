#+title: Dsa

* Arrays
** Static Arrays
- Storing and accessing sequential data
- temp storage of objects
- used by IO routines as buffers
- lookup tables and inverse lookup tables
- can be used to return multiple values from a function
- used in dynamic programming to cache answers to subproblems
*** Complexity
- Access: O(1)
- Search: O(n)
** Dynamic Arrays
- can grow and shrink in size
*** Complexity
- Access: O(1)
- Search: O(n)
- Insertion: O(n)
- Appending: O(1)
- Deletion: O(n)
*** Creating Dynamic Arrays
- Using Static arrays:
  * Create static array with init size
  * Add elements to underlying array keeping number of elements tracked
  * If adding element will overflow, create another array of 2x(size) and copy contents of first arr into second

#+BEGIN_SRC cpp

@SuppressWarnings("unchecked")
public class Array<T> implements Iterable<T> {
    T[] arr;
    int len = 0;
    int capacity = 0;

public:
    Array() { this(16); }
    Array(int capacity) {
        if (capacity < 0) throw new IllegalArgumentException("Illegal Capacity: " + capacity);
        this.capacity = capacity;
    }
    int size() { return len; }
    bool isEmpty() { return size() == 0; }

    T get(int index) { return arr[index]; }
    void set(int index, T elem) { arr[index] = elem; }

    void clear() {
        for (int i = 0; i < capacity; i++) {
            arr[i] = nullptr;
            len = 0;
        }
    }

    void add(T elem) {
        if (len + 1 >= capacity) {
            if (capacity == 0) capacity = 1;
            else capacity *= 2;
            T[] new_arr = (T[]) new Object[capacity];
            for (int i = 0; i < len; i++)
                new_arr[i] = arr[i];
            arr = new_arr; // arr has extra nulls padded
        }
        arr[len+=] = elem;
    }

    void removeAt(int rm_index) {
        if (rm_index >= len && rm_index < 0) throw new IndexOutOfBoundsException();
        T data = arr[rm_index];
        T[] new_arr = (T[]) new Object[len-1];
        for (int i = 0, j = 0; i < len; i++, j++)
            if (i == rm_index) j--;
            else new_arr[j] = arr[i];
        arr = new_arr;
        capacity = --len;
        return data;
    }

}
#+END_SRC


* Union Find (Disjoint Set)
- Keeps track of elements which are split into one or more disjoint sets.
- We do not "un-union" elements. This would be inefficient as we would have to update all children of the nodes.
- Number of components = number of roots remaining. Number of root nodes never increases.
- 2 primary operations:
  1. Find
  2. Union
** Complexity
- Construction: O(n)
- Union: a(n)
- Find: a(n)
- Get component size: a(n)
- Check if connected: a(n)
- Count components: O(1)
( a(n) - Amortized constant time )
** Kruskal's Algo:
Given a graph G = (V, E) we want to find a Minimum Spanning Tree in the graph (may not be unique).
- A Minimum spanning tree is a subset of the edges which connect all vertices in the graph with the minimal total edge cost.
*** How
- Sort edges by ascending edge weight
- Walk through sorted edges and look at the 2 nodes the edge belongs to. If ndoes are already unified we don't include this edge, otherwise we include it and unify the nodes.
- Algo terminates when every edge has been processed or all vertices have been unified
**** Creating Union Find (no path compression)
- First construct bijection (mapping) between your objects and integers in the range [0, n)
  ( step not necessary but will allow to construct array-based union find )
***** Find
- To find which component a particular element belongs to find the root of that component bby following the parent nodes until a self loop is reached.
***** Union
- To unify 2 elements find which are the root nodes of each component and if the root nodes are different, make one of the root nodes the parent of the other.
**** Union Find (Path Compression)
