#+title: RUST
#+author: Karttikeya Sinha

Template:
#+begin_src rust
fn main() {

}
#+end_src

* Match
#+begin_src rust
fn main() {
    use std::cmp::Ordering;
    let myage = 18;
    let voteage = 18;

    match myage.cmp(&vote_age) {
        Ordering::Less => println!("Can't"),
        Ordering::Greater => println!("Can"),
        Ordering::Equal => println!("Just can")
    };

    matches!(self, Days::Saturday | Days::Sunday);

}
#+end_src

* Strings
#+begin_src rust
fn main() {
    let st1 = String::from("d f d a b g s");
    let mut v1: Vec<char> = st1.chars().collect();
    v1.sort();
    v1.dedup();

    for i in v1.iter() {
        println!("{i}");
    }
#+end_src

* Enums
#+begin_src rust
fn main() {
    enum Days {
        Monday,
        Tueday,
        Wednesday,
        Thursday,
        Friday,
        Saturday,
        Sunday,
    }

    impl Days {
        fn is_weekday(&self) -> bool {
            // match self {
            //     Days::Saturday | Days::Sunday => true,
            //     _ => false,
            // }
            matches!(self, Days::Saturday | Days::Sunday)
        }
    }

    let today:Days = Days::Monday;
    println!("{}", today.is_weekday())
}
#+end_src

* Hash Maps
#+begin_src rust
fn main() {
    use std::collections::hash_map;
    let mut heroes = HashMap::new();
    heroes.insert("superman", "Clark Kent");
    heroes.insert("batman", "Bruce Wayne");
    heroes.insert("flash", "Wally West");

    for(k, v) in heroes.iter() {
        println!("{k} is {v}");
    }
    if heroes.contains_key(&"batman") {
        let the_batman = heroes.get(&"batman");
        match the_batman {
            Some(_x) => println!("Hero"),
            None => println!("Villain"),
        };
    };

}
#+end_src

* Structs
#+begin_src rust
fn main() {

}
#+end_src

